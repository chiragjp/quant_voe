primary_variable='LBXCOT',
meta_analysis = TRUE,
fdr_cutoff = 1,
max_vibration_num = 1000,
cores = 2,
model_type = 'survey',
ids = 'SDMVPSU',
strata = 'SDMVSTRA',
weights = 'WTMEC2YR',
nest = TRUE)
head(dependent_toy_dataset1_nhanes)
head(dependent_toy_dataset1_nhanes)
head(dependent_toy_dataset2_nhanes)
head(independent_toy_dataset2_nhanes)
head(independent_toy_dataset1_nhanes)
knitr::opts_chunk$set(echo = TRUE)
#load required packages
library(quantvoe)
library(tidyverse)
library(ggplot2)
#explore vignette data after loading quantvoe package
print('Number of independent variables:')
ncol(quantvoe::independent_toy_dataset1_nhanes)-1
print('Number of dependent variables:')
ncol(quantvoe::dependent_toy_dataset1_nhanes)-1
print('Identity of dependent variables:')
colnames(dependent_toy_dataset1_nhanes)[2:3]
head(quantvoe::dependent_toy_dataset1_nhanes)
head(quantvoe::independent_toy_dataset2_nhanes)
head(quantvoe::dependent_toy_dataset1_nhanes)
head(quantvoe::independent_toy_dataset2_nhanes)
#deploy full pipeline
vibration_output = quantvoe::full_voe_pipeline(
dependent_variables=list('dataset1' = dependent_toy_dataset1_nhanes,'dataset2' = dependent_toy_dataset2_nhanes),
independent_variables=list('dataset1' = independent_toy_dataset1_nhanes,'dataset2' = independent_toy_dataset2_nhanes),
primary_variable='LBXCOT',
meta_analysis = TRUE,
fdr_cutoff = 1,
max_vibration_num = 1000,
cores = 2,
model_type = 'survey',
ids = 'SDMVPSU',
strata = 'SDMVSTRA',
weights = 'WTMEC2YR',
nest = TRUE)
#deploy full pipeline
vibration_output = quantvoe::full_voe_pipeline(
dependent_variables=list('dataset1' = dependent_toy_dataset1_nhanes,'dataset2' = dependent_toy_dataset2_nhanes),
independent_variables=list('dataset1' = independent_toy_dataset1_nhanes,'dataset2' = independent_toy_dataset2_nhanes),
primary_variable='LBXCOT',
meta_analysis = TRUE,
fdr_cutoff = 1,
max_vibration_num = 10,
cores = 2,
model_type = 'survey',
ids = 'SDMVPSU',
strata = 'SDMVSTRA',
weights = 'WTMEC2YR',
nest = TRUE)
#deploy full pipeline
vibration_output = quantvoe::full_voe_pipeline(
dependent_variables=list('dataset1' = dependent_toy_dataset1_nhanes,'dataset2' = dependent_toy_dataset2_nhanes),
independent_variables=list('dataset1' = independent_toy_dataset1_nhanes,'dataset2' = independent_toy_dataset2_nhanes),
primary_variable='LBXCOT',
meta_analysis = TRUE,
fdr_cutoff = 1,
max_vibration_num = 500,
cores = 2,
model_type = 'survey',
ids = 'SDMVPSU',
strata = 'SDMVSTRA',
weights = 'WTMEC2YR',
nest = TRUE)
#if you didn't want to run a meta-analysis, you could use the following command. It will not run in this demo because it has been commented out, and it is only here for reference.
#quantvoe::full_voe_pipeline(
#  dependent_variables=dependent_toy_dataset1_nhanes,
#  independent_variables=independent_toy_dataset1_nhanes,
#  primary_variable='LBXCOT',
#  fdr_cutoff = 1,
#  max_vibration_num = 1000,
#  cores = 2,
#  model_type = 'survey',
#  ids = 'SDMVPSU',
#  strata = 'SDMVSTRA',
#  weights = 'WTMEC2YR',
#  nest = TRUE)
names(vibration_output)
#explore voe output
names(vibration_output)
vibration_output[['initial_association_output']]
#explore voe output
names(vibration_output)
print(vibration_output[['initial_association_output']])
print(vibration_output[['meta_analyis_output']])
#deploy full pipeline -- this will likely take about 2-5 minutes on your local machine.
quantvoe_output = quantvoe::full_voe_pipeline(
dependent_variables=list('dataset1' = dependent_toy_dataset1_nhanes,'dataset2' = dependent_toy_dataset2_nhanes),
independent_variables=list('dataset1' = independent_toy_dataset1_nhanes,'dataset2' = independent_toy_dataset2_nhanes),
primary_variable='LBXCOT',
meta_analysis = TRUE,
fdr_cutoff = 1,
max_vibration_num = 500,
cores = 2,
model_type = 'survey',
ids = 'SDMVPSU',
strata = 'SDMVSTRA',
weights = 'WTMEC2YR',
nest = TRUE)
#if you didn't want to run a meta-analysis, you could use the following command. It will not run in this demo because it has been commented out, and it is only here for reference.
#quantvoe::full_voe_pipeline(
#  dependent_variables=dependent_toy_dataset1_nhanes,
#  independent_variables=independent_toy_dataset1_nhanes,
#  primary_variable='LBXCOT',
#  fdr_cutoff = 1,
#  max_vibration_num = 1000,
#  cores = 2,
#  model_type = 'survey',
#  ids = 'SDMVPSU',
#  strata = 'SDMVSTRA',
#  weights = 'WTMEC2YR',
#  nest = TRUE)
vibration_output = quantvoe_output[['vibration_output']]
names(vibration_output)
vibration_output[['summarized_vibration_output']]
range(vibration_output[['data']]$estimate)
range(vibration_output[['data']]$p.value)
vibration_output[['data']]$p.value
max(vibration_output[['data']]$p.value,na.rm=TRUE)
min(vibration_output[['data']]$p.value,na.rm=TRUE)
-log10(min(vibration_output[['data']] %>% filter(p.value!=0) %>% select(p.value),na.rm=TRUE))
head(vibration_output[['data']])
vibration_output = quantvoe_output[['vibration_output']]
names(vibration_output)
vibration_output[['summarized_vibration_output']]
outplots[[paste(f)]]=ggplot(all_multi_good_summary_stats, aes(x = estimate, y = -log10(p.value), label = feature)) + geom_point(size=.5,aes(color=`Reported in literature review`)) +theme_cowplot(12)+ geom_hline(yintercept = -log10(.05))+ xlim(-1, 1) +ylim(0,5)+ theme(legend.position = "none") +theme(axis.title.y=element_blank(),axis.title.x=element_blank())+ggtitle(toupper(gsub('_90.rds','',f)))
vibration_output = quantvoe_output[['vibration_output']]
names(vibration_output)
vibration_output[['summarized_vibration_output']]
ggplot(data=vibration_output[['data']] %>% filter(dependent_feature=='MSYS'),aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-1, 1) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']] %>% filter(dependent_feature=='BMXBMI'),aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-1, 1) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
vibration_output = quantvoe_output[['vibration_output']]
names(vibration_output)
vibration_output[['summarized_vibration_output']]
ggplot(data=vibration_output[['data']] %>% filter(dependent_feature=='MSYS'),aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']] %>% filter(dependent_feature=='BMXBMI'),aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
#load required packages
library(quantvoe)
library(tidyverse)
library(ggplot2)
library(cowplot)
#load required packages
library(quantvoe)
library(tidyverse)
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
vibration_output = quantvoe_output[['vibration_output']]
names(vibration_output)
vibration_output[['summarized_vibration_output']]
ggplot(data=vibration_output[['data']] %>% filter(dependent_feature=='MSYS'),aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']] %>% filter(dependent_feature=='BMXBMI'),aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ BMI')
confounder_analysis = vibration_output[['confounder_analysis']]
confounder_analysis
confounder_analysis_significant = vibration_output[['confounder_analysis']] %>% filter(p.value<0.05)
confounder_analysis_significant
confounder_analysis_significant = vibration_output[['confounder_analysis']] %>% filter(p.value<0.05) %>% arrange(desc(estimate))
confounder_analysis_significant
confounder_analysis_significant = vibration_output[['confounder_analysis']] %>% filter(p.value<0.05) %>% arrange(desc(estimate)) %>% filter(term!='(Intercept)')
confounder_analysis_significant
vibration_output[['confounder_analysis']]
confounder_analysis_significant = vibration_output[['confounder_analysis']] %>% filter(p.value<0.05) %>% arrange(desc(estimate)) %>% filter(term!='(Intercept)')
ggplot(confounder_analysis_significant,aes(x=reorder(term,estimate),y=estimate)) +geom_bar(stat='identity',position='dodge') + xlab('') + ylab('Change in model effect size')+ggtitle(p)+geom_errorbar(aes(ymin =sdmin,ymax=sdmax), width = 0.2, position = position_dodge(width = 0.9))+ theme(legend.position = 'bottom',plot.title = element_text(size=12))+theme(axis.text = element_text(size=10,angle=50,hjust=1))
quantvoe_output[['vibration_output']]
names(quantvoe_output[['vibration_output']])
quantvoe_output[['vibration_output']]
vibration_output[['confounder_analysis']]
confounder_analysis_significant = vibration_output[['confounder_analysis']] %>% filter(p.value<0.05) %>% arrange(desc(estimate)) %>% filter(term!='(Intercept)')
ggplot(confounder_analysis_significant,aes(x=reorder(term,estimate),y=estimate)) +geom_bar(stat='identity',position='dodge') + xlab('') + ylab('Change in model effect size')+ggtitle('Overall confounders of BMI and blood pressure associations with smoking ')+geom_errorbar(aes(ymin =sdmin,ymax=sdmax), width = 0.2, position = position_dodge(width = 0.9))+ theme(legend.position = 'bottom',plot.title = element_text(size=12))+theme(axis.text = element_text(size=10,angle=50,hjust=1))
ggplot(data=vibration_output[['data']],aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05),aes(color=ordinary_salt)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05),aes(fill=ordinary_salt)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05),aes(groupo=ordinary_salt)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05),aes(group=ordinary_salt)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(fill=ordinary_salt,x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(fill=as.factor(ordinary_salt),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(color=as.factor(ordinary_salt),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(color=as.factor(DR1TBCAR),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(color=as.factor(DR1TBCAR),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5,alpha=.3)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(color=as.factor(occupation),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5,alpha=.3)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(color=as.factor(male),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5,alpha=.3)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(color=as.factor(LBXMCVSI),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5,alpha=.3)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(color=as.factor(occupation),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5,alpha=.3)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(color=as.factor(occupation),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=1,alpha=.3)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(shape=as.factor(term),color=as.factor(occupation),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=1,alpha=.3,)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']],aes(shape=as.factor(dependent_feature),color=as.factor(occupation),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=1,alpha=.3,)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
analyze_voe_data(quantvoe_output[['vibration_output']][['data']],TRUE)
quantvoe_output[['vibration_output']][['data']]
x=quantvoe_output[['vibration_output']][['data']]
analyze_voe_data(vibration_output = x,confounder_analysis = TRUE)
x
x=quantvoe_output[['vibration_output']][['data']]
#' Unnest vibration data
#'
#' Unnest regression output for vibrations.
#' @param vib_df VoE dataframe with columns for each adjuster (output of get_adjuster_expanded_vibrations).
#' @importFrom rlang .data
#' @importFrom magrittr "%>%"
#' @keywords voe analysis
filter_unnest_feature_vib <- function(vib_df) {
return(vib_df %>% dplyr::slice(which(purrr::map_lgl(vib_df$feature_fit, ~class(.)[[1]] == "tbl_df"))) %>% tidyr::unnest(.data$feature_fit))
}
#' Expand vibration data
#'
#' Add column to vibration output for each adjuster (indicating presence or absence in a model).
#' @param voe_df Raw vibration output, the first entry in the output of compute_vibrations.
#' @param adjusters A dataframe, each column corresponding to the adjusters used in each dataset for vibrations. This is the second entry in the compute_vibrations output.
#' @importFrom rlang .data
#' @importFrom magrittr "%>%"
#' @keywords voe analysis
get_adjuster_expanded_vibrations <- function(voe_df, adjusters) {
copy_voe_df <- rlang::duplicate(voe_df, shallow = FALSE)
adjusters= unique(unlist(unname(purrr::map(adjusters, function(x) unlist(x)))))
for (variable in adjusters) {
copy_voe_df  = copy_voe_df %>% dplyr::mutate(newcol = purrr::map_int(copy_voe_df$vars, ~(variable %in% .)))
colnames(copy_voe_df)[length(colnames(copy_voe_df))] <- variable
}
return(copy_voe_df)
}
#' Find confounders
#'
#' Model confounding from vibration analysis.
#' @param voe_list_for_reg A dataframe of expanded VoE output (output of filter_unnest_feature_vib)
#' @keywords voe analysis
#' @importFrom rlang .data
#' @importFrom dplyr "%>%"
find_confounders_linear <- function(voe_list_for_reg){
trylinear=FALSE
ptype=unique(voe_list_for_reg$term)
voe_adjust_for_reg_ptype <- voe_list_for_reg %>% dplyr::select(-.data$dataset_id,-.data$independent_feature) %>% dplyr::select_if(~ length(unique(.)) > 1) %>% dplyr::select(-c(.data$full_fits,.data$std.error,.data$statistic))
voe_adjust_for_reg_ptype$estimate = abs(voe_adjust_for_reg_ptype$estimate)
if('dependent_feature' %in% colnames(voe_adjust_for_reg_ptype)){
if(!(1 %in% unique(unlist(unname(table(voe_adjust_for_reg_ptype$dependent_feature)))))){
tryCatch({
fit_estimate=lme4::lmer(data=voe_adjust_for_reg_ptype,stats::as.formula(estimate ~ . +(1|dependent_feature) - dependent_feature - estimate - p.value),control = lme4::lmerControl(optimizer = "bobyqa"))
fit_estimate_forplot=broom.mixed::tidy(fit_estimate) %>% dplyr::mutate(sdmin=(.data$estimate-.data$std.error),sdmax=(.data$estimate+.data$std.error))
},
error = function(e){
print('Note: Mixed effect modeling to identify sources of confounding failed. Running a simple linear model instead. If you want to try this analysis yourself, you can access the raw data for this yourself in the output and follow the methodological layout in the docs.')
trylinear=TRUE
})
}
}
if(trylinear==TRUE){
tryCatch({
fit_estimate=stats::lm(data=voe_adjust_for_reg_ptype,stats::as.formula(estimate ~ . - estimate - dependent_feature - p.value))
fit_estimate_forplot=broom::tidy(fit_estimate) %>% dplyr::mutate(sdmin=(.data$estimate - .data$std.error),sdmax=(.data$estimate + .data$std.error))
},
error = function(e){
fit_estimate_forplot = 'Confounder analysis failed.'
print('Confounder analysis failed. We recommend looking at the raw vibration output to see what the issue may be.')
})
}
else{
tryCatch({
print('Note: Using regular linear model for confounder analysis instead of a mixed effect one. See the GitHub README for more details.')
fit_estimate=stats::lm(data=voe_adjust_for_reg_ptype,stats::as.formula(estimate ~ . - estimate - p.value))
fit_estimate_forplot=broom::tidy(fit_estimate) %>% dplyr::mutate(sdmin=(.data$estimate - .data$std.error),sdmax=(.data$estimate + .data$std.error))
},
error = function(e){
fit_estimate_forplot = 'Confounder analysis failed.'
print('Confounder analysis failed. We recommend looking at the raw vibration output to see what the issue may be.')
})
}
return(fit_estimate_forplot)
}
#' summarize_vibration_data_by_feature
#'
#' Summarize output of vibrations for each dependent feature of interest.
#' @param df A dataframe of expanded VoE output (output of filter_unnest_feature_vib)
#' @keywords voe analysis
#' @importFrom rlang .data
#' @importFrom magrittr "%>%"
summarize_vibration_data_by_feature <- function(df){
p <- c(0.01,.5,.99)
p_names <- purrr::map_chr(p, ~paste0('estimate_quantile_',.x*100, "%"))
p_funs <- purrr::map(p, ~purrr::partial(quantile, probs = .x, na.rm = TRUE)) %>% purrr::set_names(nm = p_names)
model_counts = df %>% dplyr::count(.data$dependent_feature) %>% dplyr::rename(number_of_models=.data$n)
df_estimates = suppressMessages(df %>% dplyr::group_by(.data$dependent_feature) %>% dplyr::summarize_at(dplyr::vars(.data$estimate), tibble::lst(!!!p_funs)) %>% dplyr::mutate(estimate_diff_99_1 = .data$`estimate_quantile_99%`-.data$`estimate_quantile_1%`,janus_effect=df %>% dplyr::group_by(.data$dependent_feature) %>% dplyr::summarise(janus_effect = sum(.data$estimate > 0, na.rm = TRUE)/sum(is.finite(.data$estimate), na.rm = TRUE)) %>% dplyr::ungroup() %>% dplyr::select(.data$janus_effect) %>% unname %>% unlist))
p_names <- purrr::map_chr(p, ~paste0('pval_quantile_',.x*100, "%"))
p_funs <- purrr::map(p, ~purrr::partial(quantile, probs = .x, na.rm = TRUE)) %>% purrr::set_names(nm = p_names)
df_pval = df %>% dplyr::group_by(.data$dependent_feature) %>% dplyr::summarize_at(dplyr::vars(.data$p.value), tibble::lst(!!!p_funs)) %>% dplyr::mutate(pvalue_diff_99_1 = .data$`pval_quantile_99%`-.data$`pval_quantile_1%`)
summarized_voe_data=dplyr::bind_cols(model_counts, df_estimates %>% dplyr::select(-.data$dependent_feature),df_pval %>% dplyr::select(-.data$dependent_feature))
return(summarized_voe_data)
}
#' Analyze VoE data
#'
#' Post-process vibration output.
#' @param vibration_output Output list from the compute vibrations function.
#' @param confounder_analysis TRUE/FALSE -- run confounder analysis (default = TRUE).
#' @keywords voe analysis
#' @importFrom rlang .data
#' @importFrom dplyr "%>%"
#' @export
analyze_voe_data <- function(vibration_output,confounder_analysis){
voe_annotated =get_adjuster_expanded_vibrations(vibration_output[[1]], vibration_output[[2]])
voe_unnested_annotated = filter_unnest_feature_vib(voe_annotated) %>% dplyr::select(-.data$vars)
summarized = summarize_vibration_data_by_feature(voe_unnested_annotated)
c_analysis='No confounder analysis completed.'
if(confounder_analysis==TRUE){
if(nrow(voe_unnested_annotated)>=10){
c_analysis = find_confounders_linear(voe_unnested_annotated)
}
else{
print('Skipping confounder analysis, as not enough vibrations (under 10) completed to make it worthwhile.')
}
}
return(list('summarized_vibration_output'= summarized,'confounder_analysis'=c_analysis,'data'=voe_unnested_annotated))
}
vibration_output = list(c(x,TRU))
vibration_output = list(c(x,TRUE))
get_adjuster_expanded_vibrations(vibration_output[[1]], vibration_output[[2]])
get_adjuster_expanded_vibrations(vibration_output[[1]], vibration_output[[2]])
vibration_output = list(x,TRUE)
get_adjuster_expanded_vibrations(vibration_output[[1]], vibration_output[[2]])
find_confounders_linear(x)
x=voe_list_for_reg
voe_list_for_reg=x
ptype=unique(voe_list_for_reg$term)
ptype
voe_adjust_for_reg_ptype <- voe_list_for_reg %>% dplyr::select(-.data$dataset_id,-.data$independent_feature) %>% dplyr::select_if(~ length(unique(.)) > 1) %>% dplyr::select(-c(.data$full_fits,.data$std.error,.data$statistic))
voe_adjust_for_reg_ptype
voe_adjust_for_reg_ptype$estimate = abs(voe_adjust_for_reg_ptype$estimate)
voe_adjust_for_reg_ptype
'dependent_feature' %in% colnames(voe_adjust_for_reg_ptype)
!(1 %in% unique(unlist(unname(table(voe_adjust_for_reg_ptype$dependent_feature)))))
if('dependent_feature' %in% colnames(voe_adjust_for_reg_ptype)){
if(!(1 %in% unique(unlist(unname(table(voe_adjust_for_reg_ptype$dependent_feature)))))){
tryCatch({
fit_estimate=lme4::lmer(data=voe_adjust_for_reg_ptype,stats::as.formula(estimate ~ . +(1|dependent_feature) - dependent_feature - estimate - p.value),control = lme4::lmerControl(optimizer = "bobyqa"))
fit_estimate_forplot=broom.mixed::tidy(fit_estimate) %>% dplyr::mutate(sdmin=(.data$estimate-.data$std.error),sdmax=(.data$estimate+.data$std.error))
},
error = function(e){
print('Note: Mixed effect modeling to identify sources of confounding failed. Running a simple linear model instead. If you want to try this analysis yourself, you can access the raw data for this yourself in the output and follow the methodological layout in the docs.')
trylinear=TRUE
})
}
}
fit_estimate_forplot
fit_estimate
find_confounders_linear(x)
#' Find confounders
#'
#' Model confounding from vibration analysis.
#' @param voe_list_for_reg A dataframe of expanded VoE output (output of filter_unnest_feature_vib)
#' @keywords voe analysis
#' @importFrom rlang .data
#' @importFrom dplyr "%>%"
#' @export
find_confounders_linear <- function(voe_list_for_reg){
trylinear=FALSE
ptype=unique(voe_list_for_reg$term)
voe_adjust_for_reg_ptype <- voe_list_for_reg %>% dplyr::select(-.data$dataset_id,-.data$independent_feature) %>% dplyr::select_if(~ length(unique(.)) > 1) %>% dplyr::select(-c(.data$full_fits,.data$std.error,.data$statistic))
voe_adjust_for_reg_ptype$estimate = abs(voe_adjust_for_reg_ptype$estimate)
if('dependent_feature' %in% colnames(voe_adjust_for_reg_ptype)){
if(!(1 %in% unique(unlist(unname(table(voe_adjust_for_reg_ptype$dependent_feature)))))){
tryCatch({
fit_estimate=lme4::lmer(data=voe_adjust_for_reg_ptype,stats::as.formula(estimate ~ . +(1|dependent_feature) - dependent_feature - estimate - p.value),control = lme4::lmerControl(optimizer = "bobyqa"))
fit_estimate_forplot=broom.mixed::tidy(fit_estimate) %>% dplyr::mutate(sdmin=(.data$estimate-.data$std.error),sdmax=(.data$estimate+.data$std.error))
},
error = function(e){
print('Note: Mixed effect modeling to identify sources of confounding failed. Running a simple linear model instead. If you want to try this analysis yourself, you can access the raw data for this yourself in the output and follow the methodological layout in the docs.')
trylinear=TRUE
})
}
if(trylinear==TRUE){
tryCatch({
fit_estimate=stats::lm(data=voe_adjust_for_reg_ptype,stats::as.formula(estimate ~ . - estimate - dependent_feature - p.value))
fit_estimate_forplot=broom::tidy(fit_estimate) %>% dplyr::mutate(sdmin=(.data$estimate - .data$std.error),sdmax=(.data$estimate + .data$std.error))
},
error = function(e){
fit_estimate_forplot = 'Confounder analysis failed.'
print('Confounder analysis failed. We recommend looking at the raw vibration output to see what the issue may be.')
})
}
}
else{
tryCatch({
print('Note: Using regular linear model for confounder analysis instead of a mixed effect one. See the GitHub README for more details.')
fit_estimate=stats::lm(data=voe_adjust_for_reg_ptype,stats::as.formula(estimate ~ . - estimate - p.value))
fit_estimate_forplot=broom::tidy(fit_estimate) %>% dplyr::mutate(sdmin=(.data$estimate - .data$std.error),sdmax=(.data$estimate + .data$std.error))
},
error = function(e){
fit_estimate_forplot = 'Confounder analysis failed.'
print('Confounder analysis failed. We recommend looking at the raw vibration output to see what the issue may be.')
})
}
return(fit_estimate_forplot)
}
find_confounders_linear(x)
knitr::opts_chunk$set(echo = TRUE)
#load required packages
library(quantvoe)
library(tidyverse)
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
#explore vignette data after loading quantvoe package
print('Number of independent variables:')
ncol(quantvoe::independent_toy_dataset1_nhanes)-1
print('Number of dependent variables:')
ncol(quantvoe::dependent_toy_dataset1_nhanes)-1
print('Identity of dependent variables:')
colnames(dependent_toy_dataset1_nhanes)[2:3]
head(quantvoe::dependent_toy_dataset1_nhanes)
head(quantvoe::independent_toy_dataset2_nhanes)
head(quantvoe::dependent_toy_dataset1_nhanes)
head(quantvoe::independent_toy_dataset2_nhanes)
#deploy full pipeline -- this will likely take about 2-5 minutes on your local machine.
quantvoe_output = quantvoe::full_voe_pipeline(
dependent_variables=list('dataset1' = dependent_toy_dataset1_nhanes,'dataset2' = dependent_toy_dataset2_nhanes),
independent_variables=list('dataset1' = independent_toy_dataset1_nhanes,'dataset2' = independent_toy_dataset2_nhanes),
primary_variable='LBXCOT',
meta_analysis = TRUE,
fdr_cutoff = 1,
max_vibration_num = 500,
cores = 2,
model_type = 'survey',
ids = 'SDMVPSU',
strata = 'SDMVSTRA',
weights = 'WTMEC2YR',
nest = TRUE)
#if you didn't want to run a meta-analysis, you could use the following command. It will not run in this demo because it has been commented out, and it is only here for reference.
#quantvoe::full_voe_pipeline(
#  dependent_variables=dependent_toy_dataset1_nhanes,
#  independent_variables=independent_toy_dataset1_nhanes,
#  primary_variable='LBXCOT',
#  fdr_cutoff = 1,
#  max_vibration_num = 1000,
#  cores = 2,
#  model_type = 'survey',
#  ids = 'SDMVPSU',
#  strata = 'SDMVSTRA',
#  weights = 'WTMEC2YR',
#  nest = TRUE)
#explore voe output
names(quantvoe_output)
print(quantvoe_output[['initial_association_output']])
print(quantvoe_output[['meta_analyis_output']])
vibration_output = quantvoe_output[['vibration_output']]
names(vibration_output)
vibration_output[['summarized_vibration_output']]
ggplot(data=vibration_output[['data']] %>% filter(dependent_feature=='MSYS'),aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
ggplot(data=vibration_output[['data']] %>% filter(dependent_feature=='BMXBMI'),aes(x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=.5)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ BMI')
vibration_output[['confounder_analysis']]
confounder_analysis_significant = vibration_output[['confounder_analysis']] %>% filter(p.value<0.05) %>% arrange(desc(estimate)) %>% filter(term!='(Intercept)')
vibration_output[['confounder_analysis']]
vibration_output[['confounder_analysis']]
confounder_analysis_significant = vibration_output[['confounder_analysis']] %>% filter(abs(statistc)>2) %>% arrange(desc(estimate)) %>% filter(term!='(Intercept)')
confounder_analysis_significant = vibration_output[['confounder_analysis']] %>% filter(abs(statistic)>2) %>% arrange(desc(estimate)) %>% filter(term!='(Intercept)')
confounder_analysis_significant
vibration_output[['confounder_analysis']]
confounder_analysis_significant = vibration_output[['confounder_analysis']] %>% filter(abs(statistic)>2.5) %>% arrange(desc(estimate)) %>% filter(term!='(Intercept)')
ggplot(confounder_analysis_significant,aes(x=reorder(term,estimate),y=estimate)) +geom_bar(stat='identity',position='dodge') + xlab('') + ylab('Change in model effect size')+ggtitle('Overall confounders of BMI and blood pressure associations with smoking ')+geom_errorbar(aes(ymin =sdmin,ymax=sdmax), width = 0.2, position = position_dodge(width = 0.9))+ theme(legend.position = 'bottom',plot.title = element_text(size=12))+theme(axis.text = element_text(size=10,angle=50,hjust=1))
ggplot(data=vibration_output[['data']],aes(shape=as.factor(dependent_feature),color=as.factor(occupation),x=estimate,y=-log10(p.value))) + geom_hline(yintercept = -log10(.05)) + geom_point(size=1,alpha=.3,)+ xlim(-.03, 0.03) +ylim(0,5)+ggtitle('VoE for systolic blood pressure ~ smoking')
setwd('~/GitHub/quantvoe/data')
load('nhanesToyDataset.rda')
ls()
save(dependent_toy_dataset1_nhanes,dependent_toy_dataset2_nhanes,independent_toy_dataset1_nhanes,independent_toy_dataset2_nhanes,file='nhanesToyDataset.rda')
load('nhanesToyDataset.rda)
load('nhanesToyDataset.rda')
save(dependent_toy_dataset1_nhanes,dependent_toy_dataset2_nhanes,independent_toy_dataset1_nhanes,independent_toy_dataset2_nhanes,file='nhanesToyDataset.rda')
save(dependent_toy_dataset1_nhanes,dependent_toy_dataset2_nhanes,independent_toy_dataset1_nhanes,independent_toy_dataset2_nhanes,file='nhanesToyDataset.rda')
load('nhanesToyDataset.rda')
load('nhanesToyDataset.rda')
load('nhanesToyDataset.rda')
load('nhanesToyDataset.rda')
load('nhanesToyDataset.rda')
load('nhanesToyDataset.rda')
load('nhanesToyDataset.rda')
save(dependent_toy_dataset1_nhanes,dependent_toy_dataset2_nhanes,independent_toy_dataset1_nhanes,independent_toy_dataset2_nhanes,file='nhanesToyDataset.rda')
ls()
rm(list=ls())
#load required packages
library(quantvoe)
library(dplyr)
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
#explore vignette data after loading quantvoe package
print('Number of independent variables:')
ncol(quantvoe::independent_toy_dataset1_nhanes)-1
print('Number of dependent variables:')
ncol(quantvoe::dependent_toy_dataset1_nhanes)-1
print('Identity of dependent variables:')
colnames(dependent_toy_dataset1_nhanes)[2:3]
head(quantvoe::dependent_toy_dataset1_nhanes)
head(quantvoe::independent_toy_dataset2_nhanes)[,1:10]
head(quantvoe::dependent_toy_dataset1_nhanes)
head(quantvoe::independent_toy_dataset2_nhanes)[,1:10]
#deploy full pipeline -- this will likely take about 2-5 minutes on your local machine.
quantvoe_output = quantvoe::full_voe_pipeline(
dependent_variables=list('dataset1' = dependent_toy_dataset1_nhanes,'dataset2' = dependent_toy_dataset2_nhanes),
independent_variables=list('dataset1' = independent_toy_dataset1_nhanes,'dataset2' = independent_toy_dataset2_nhanes),
primary_variable='LBXCOT',
meta_analysis = TRUE,
fdr_cutoff = 1,
max_vibration_num = 500,
cores = 2,
model_type = 'survey',
ids = 'SDMVPSU',
strata = 'SDMVSTRA',
weights = 'WTMEC2YR',
nest = TRUE)
