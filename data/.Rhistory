#load in summary data
meta_analysis_output=rbind(metaph,path,gf)
meta_analysis_output=meta_analysis_output %>% mutate(datatype = ifelse(dtype=='metaphlan', 'Species',ifelse(dtype=='genefamilies', 'Gene Families', 'Pathways'))) %>% mutate(joincol=paste(feature,datatype,phenotype,sep='_'))
litvibs=read.csv('~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/meta_stats/disease_meta_analysis/vibration_choices_literature.csv',stringsAsFactors = FALSE,sep=',') %>% mutate(litvib=TRUE,datatype = ifelse(Data.Type=='species', 'Species',ifelse(Data.Type=='genefamilies', 'Gene Families', 'Pathways')),joincol=paste(Feature.ID,datatype,Phenotype,sep='_'))
summary_data=readRDS('~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/meta_stats/disease_meta_analysis/voe/summary_output_vibrations.rds')
summary_data=summary_data %>% mutate(phenotype=strsplit(as.character(summary_data$id),'_') %>% map_chr(1))
summary_data$phenotype=gsub('metaphlan-','',summary_data$phenotype)
summary_data$phenotype=gsub('pathways-','',summary_data$phenotype)
summary_data$phenotype=gsub('-meta-stats-to','',summary_data$phenotype)
summary_data$datatype[summary_data$datatype=='single']='Gene Families'
summary_data=summary_data %>% mutate(datatype = ifelse(datatype=='species', 'Species',ifelse(datatype=='genefamilies', 'Gene Families', 'Pathways')))
summary_data = summary_data %>% mutate(joincol=paste(feature,datatype,phenotype,sep='_'))
ma_vib_output=merge(summary_data,meta_analysis_output,by='joincol',how='inner')
ma_vib_output=left_join(ma_vib_output,litvibs %>% select(joincol,litvib),by=c('joincol'))
ma_vib_output$litvib[is.na(ma_vib_output$litvib)]=FALSE
write.csv(ma_vib_output,'~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/meta_stats/disease_meta_analysis/figures/full_association_voe_output.csv')
ma_vib_output=ma_vib_output %>% filter(!(adj>0.5 & litvib==TRUE))
###plot overall histograms
pdf('estimate_range_distribution.pdf',width=6,height=6)
ggplot(data=summary_data, aes(x=estimate_range)) + geom_density()+ xlab('effect size range')
dev.off()
summary(summary_data$estimate_range)
pdf('pvalue_range_distribution.pdf',width=6,height=6)
ggplot(summary_data, aes(x=p.value_range)) + geom_density() + xlab('-log(10) p-value range')
dev.off()
summary(summary_data$p.value_range)
pdf('fractionpositive_range_distribution.pdf',width=6,height=6)
ggplot(summary_data, aes(x=fraction_positive)) + geom_density() + xlab('janus effect range')
dev.off()
summary(summary_data$fraction_positive)
###plot histograms for all 3 metrics
#ggplot(summary, aes(y=log10(estimate_range),x=datatype)) + geom_boxplot()
#ggplot(summary, aes(y=log10(p.value_range),x=datatype)) + geom_boxplot()
#ggplot(summary, aes(x=fraction_positive,fill=datatype)) + geom_density(alpha=.5)
#select metrics
#JE greater than 0.99 or less than 0.01
#ER less than 10
head(ma_vib_output)
ma_vib_output$feature_name
'moorei' %in% ma_vib_output$feature_name
grep('moorei',ma_vib_output$feature_name)
ma_vib_output$feature_name[grep('moorei',ma_vib_output$feature_name)]
ma_vib_output %>% filter(feature_name=='k__Bacteria|p__Firmicutes|c__Erysipelotrichia|o__Erysipelotrichales|f__Erysipelotrichaceae|g__Solobacterium|s__Solobacterium_moorei')
head(features_all)
head(meta_analysis_output)
head(voe)
files
voe %>% filter(feature=='feature_176')
voe %>% filter(feature=='feature_176', phenotype=='CRC')
voe %>% filter(feature=='feature_176', phenotype=='CRC') %>% select(estimate)
%>% filter(esta)voe %>% filter(feature=='feature_176', phenotype=='CRC') %>% select(estimate)
voe %>% filter(feature=='feature_176', phenotype=='CRC') %>% select(estimate) %>% filter(estimate > 0)
voe %>% filter(feature=='feature_176', phenotype=='CRC') %>% select(estimate) %>% filter(estimate <0)
voe %>% filter(feavoeture=='feature_176', phenotype=='CRC') %>% select(estimate,p, function, FUN.VALUE = type, ...))
voe
head(voe)
voe %>% filter(feavoeture=='feature_176', phenotype=='CRC') %>% select(estimate,p.value)
voe %>% filter(feature=='feature_176', phenotype=='CRC') %>% select(estimate,p.value)
test=voe %>% filter(feature=='feature_176', phenotype=='CRC') %>% select(estimate,p.value)
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_point()
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_densiry()
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_density()
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_density(position='stack')
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_bin2d()
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_bin2d(10)
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_hex()
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_hex(bins=70)
install.packages('hexbin')
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_hex(bins=70)
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_density_2d()
ggplot(test,aes(x=estimate,y=-log10(p.value)))+geom_hex(bins=100)
devtools::install_local('~/GitHub/voe/')
devtools::install_local('~/GitHub/voe/',force=TURE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
library(voe)
voe::analyze_voe_data()
install.packages('survey')
help(family)
help(glm)
a=gaussian()
a=`gaussian()`
a
help(svyglm())
help(svyglm
)
foo=NULL
is.null(foo)
data=readRDS('~/GitHub/voe/manuscript/nhanes_ind_data.rds')
data$sampleID
dsn <- svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC4YR, nest=T, data=newData)
library(survey)
dsn <- svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC4YR, nest=T, data=newData)
dsn <- svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC4YR, nest=T, data=dat)
dsn <- svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC4YR, nest=T, data=data)
dsn <- svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC2YR, nest=T, data=newData)
dsn <- svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC2YR, nest=T, data=data)
svyglm(TELOMEAN ~ RIDAGEYR + RIDAGEYR2 +  female + black + mexican + other_hispanic + other_eth + INDFMPIR, dsn)
data$SDMVSTRA
data$SDMVPSU
svyglm(TELOMEAN ~ RIDAGEYR + RIDAGEYR2 +  male, dsn)
svyglm(DR1TTFAT ~ RIDAGEYR2 +  male, dsn)
svyglm(DR1TTFAT ~ RIDAGEYR +  male, dsn)
svyglm(DR1TTFAT ~ RIDAGEYR +  male, dsn) %>% broom::tidy
library(tidyverse)
library(broom)
svyglm(DR1TTFAT ~ RIDAGEYR +  male, dsn) %>% broom::tidy
svyglm(DR1TTFAT ~ RIDAGEYR +  male, dsn) %>% tidy
dsn
dsn <- `svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC2YR, nest=T, data=data)`
dsn <- "svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC2YR, nest=T, data=data)"
foo=data %>% select(SDMVPSU,SDMVSTRA,WTMEC2YR,RIDAGEYR,male)
foo
dsn <- svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC2YR, nest=T, data=data)
svyglm(DR1TTFAT ~ RIDAGEYR +  male, dsn) %>% tidy
svyglm(DR1TTFAT ~ RIDAGEYR +  male, dsn) %>% tidy
dsn = "svydesign(ids=~SDMVPSU, strata=~SDMVSTRA, weight=~WTMEC2YR, nest=T, data=data)"
eval(parse(text=dsn))
dataset=data
data
dfoo <- function(dataset,...){
glm(dataset$RIDAGEYR~dataset$male)
}
foo <- function(dataset,...){
glm(dataset$RIDAGEYR~dataset$male)
}
foo(... = gaussian())
dsn
help(svydesign)
> myhist <- function(x, border="blue", ...){
+ 	hist(x, border=border, ...)
+ }
> set.seed(5)
> myhist(rnorm(1000), breaks=30)
> set.seed(5)
> myhist(rnorm(1000))  myhist <- function(x, border="blue", ...){
hist(x, border=border, ...)
}
myhist <- function(x, border="blue", ...){
hist(x, border=border, ...)
}
myhist <- function(x, border="blue", ...){
print(breaks)
hist(x, border=border, ...)
}
set.seed(5)
myhist(rnorm(1000), breaks=30)
myhist <- function(x, border="blue", ...){
hist(x, border=border, ...)
}
set.seed(5)
myhist(rnorm(1000), breaks=30)
myhist(rnorm(1000))
myhist <- function(x, border="blue", ...){
print(...)
hist(x, border=border, ...)
}
set.seed(5)
myhist(rnorm(1000), breaks=30)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
help(svydseiign)
help(svydesign)
help(glm)
source('~/.active-rstudio-document', echo=TRUE)
myfunc(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
list((1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
list(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
list(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
list(a=(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
list(a=(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),b=(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
list('a'=(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),'b'=(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
list('a'=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),'b'=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
)
furrr::future_map(mylist, function (x) myfunc(x))
source('~/.active-rstudio-document', echo=TRUE)
help("svydesign")
help(svyglm)
NCOL()
NCOL(foo)
'TRUE'
as.bool('TRUE')
as.boolean('TRUE')
as.logical("TRUE")
#find number of features going into models and overlap between output
library(tidyverse)
library(UpSetR)
library(stringr)
library(cowplot)
library(ggplot2)
library(tidyr)
library(magrittr)
library(ggnewscale)
library(ggalluvial)
library(phylobase)
library(reshape2)
library(phytools)
library(broom)
library(taxonomizr)
library(ecodist)
library(ggtree)
library(readxl)
library(pheatmap)
library(rlang)
library(circlize)
library(metafor)
library(meta)
library(lme4)
library(ggpubr)
library(lmerTest)
library(broom.mixed)
theme_set(theme_cowplot())
setwd('~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/repr/')
#load all data
counts <- list()
files=list.files()
files=files[grep('90',files)]
files=files[grep('rds',files)]
metaph=list()
voeoutput=list()
for(file in files){
f=readRDS(file)
if('meta_analyis_output' %in% names(f)){
initial_associations=f$meta_analyis_output %>% select(feature,estimate,p.val,BY,CI_95_lower,CI_95_upper)
colnames(initial_associations)[3]='p.value'
}
else{
initial_associations=f$initial_association_output %>% mutate(CI_95_lower = estimate - 1.96*std.error,CI_95_upper = estimate + 1.96*std.error) %>% select(feature,estimate,p.value,BY,CI_95_lower,CI_95_upper)
}
counts[str_replace(file,'_90.rds','')]=nrow(initial_associations)
initial_associations$filename=file
initial_associations$phenotype=toupper(str_replace(file,'_90.rds',''))
metaph[[file]]=initial_associations
voe=f$vibration_output[['data']]
voe$filename=file
voe$phenotype=toupper(str_replace(file,'_90.rds',''))
voeoutput[[file]]=voe
}
metaph = bind_rows(metaph)
metaph = metaph %>% mutate(adj=p.adjust(p.value,method='BY'))
fdr_sig = metaph %>% filter(adj<=.05) %>% select(p.value)%>% max
voe = bind_rows(voeoutput)
counts2 <- list()
counts3 <- list()
for(f in files){
counts2[str_replace(f,'_90.rds','')]=metaph %>% filter(filename==f) %>% filter(BY<.05) %>% nrow
alreadysig = metaph %>% filter(filename==f) %>% filter(BY<.05) %>% select(feature) %>% unlist %>% unname
newsigs = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% unique %>% unlist %>% unname
counts3[str_replace(f,'_90.rds','')] = length(setdiff(newsigs,alreadysig))
possibly_significant = unique(c(alreadysig,newsigs))
}
#counts4 <- list()
#counts5 <- list()
#for(f in files){
#  counts4[str_replace(f,'_90.rds','')]=metaph %>% filter(filename==f) %>% filter(BY<.1) %>% nrow
#  alreadysig = metaph %>% filter(filename==f) %>% filter(BY<.1) %>% select(feature) %>% unlist %>% unname
#  newsigs = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% unique %>% unlist %>% unname
#  counts5[str_replace(f,'_90.rds','')] = length(setdiff(newsigs,alreadysig))
#  possibly_significant = unique(c(alreadysig,newsigs))
#}
counts=data.frame(unlist(counts),unlist(counts2),unlist(counts3))
colnames(counts)=c('Features tested','Significant features (FDR < 0.05)','Additional significant (FDR < 0.05) features post-vibration')
print(counts)
print('Generating plots')
outplots=list()
files=metaph %>% select(filename) %>% unique() %>% unlist() %>% unname()
for(f in files){
all_multi_good_summary_stats=metaph %>% filter(filename==f)
name=paste(strsplit(f,'.rds')[1][1],'_plot.png',sep='')
outplots[[paste(f)]]=ggplot(all_multi_good_summary_stats, aes(x = estimate, y = -log10(p.value), label = feature)) + geom_point(size=.5) +theme_cowplot(12)+ geom_hline(yintercept = -log10(.05))+ xlim(-3, 3) +ylim(0,15) +theme(axis.title.y=element_blank(),axis.title.x=element_blank())
ggplot(all_multi_good_summary_stats, aes(x = estimate, y = -log10(adj), label = feature)) + geom_point(size=.5) +theme_cowplot(12)+ geom_hline(yintercept = -log10(.05))+ geom_hline(yintercept = -log10(.1),linetype='dashed') +xlab('Estimate') + xlim(-3, 3) +ylim(0,15)+ggtitle(unique(all_multi_good_summary_stats$phenotype))
ggsave(name,height=3,width=3,units = 'in',dpi = 300)
}
#format output plots for features
plot_grid(plotlist = outplots,ncol=6,rows=4, align = 'v')
ggsave('~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/meta_stats/disease_meta_analysis/meta_analyzed_volcanos.png')
#plot significant output
counts_subset = counts %>% filter(`Additional significant (FDR < 0.05) features post-vibration`!=0 | `Significant features (FDR < 0.05)`!=0 )
ggplot(counts_subset %>% rownames_to_column('phenotype') %>% melt,aes(x=phenotype,y=value,fill=variable)) + geom_bar(stat='identity',position='dodge') + coord_flip() + scale_fill_manual(values=RColorBrewer::brewer.pal(name='Set1',n=5))
ggsave('~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/repr/association_and_vibration_output.pdf')
#list_of_sig_features =
head(metaph)
#get features to compute vibration statistics for
for(f in files){
metaph_sub = metaph %>% filter(filename==f) %>% filter(BY<.05) %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature)
}
metaph_sub = metaph %>% filter(filename==f) %>% filter(BY<.05) %>% select(feature)
metaph_sub
voe %>% filter(filename==f) %>% filter(p.value < fdr_sig)
for(f in files){
metaph_sub = metaph %>% filter(filename==f) %>% filter(BY<.05)
metaph_sub_initial_sig_features = metaph_sub %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
}
voe_sig
voe_sig
#get features to compute vibration statistics for
for(f in files){
metaph_sub = metaph %>% filter(filename==f) %>% filter(BY<.05)
metaph_sub_initial_sig_features = metaph_sub %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
unique(c(metaph_sub_initial_sig_features,voe_sig))
}
#get features to compute vibration statistics for
for(f in files){
metaph_sub = metaph %>% filter(filename==f) %>% filter(BY<.05)
metaph_sub_initial_sig_features = metaph_sub %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
print(unique(c(metaph_sub_initial_sig_features,voe_sig)))
}
setdiff(voe_sig,metaph_sub_initial_sig_features)
voe_sig
metaph_sub_initial_sig_features
counts2 <- list()
counts3 <- list()
for(f in files){
metaph_sub = metaph %>% filter(filename==f) %>% filter(BY<.05)
metaph_sub_initial_sig_features = metaph_sub %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
counts2[str_replace(f,'_90.rds','')]= length(metaph_sub_initial_sig_features)
counts3[str_replace(f,'_90.rds','')] = length(setdiff(unlist(unname(voe_sig)),unlist(unname(metaph_sub_initial_sig_features))))
features_to_investigate = unique(c(metaph_sub_initial_sig_features,voe_sig))
}
counts=data.frame(unlist(counts),unlist(counts2),unlist(counts3))
counts
counts
#get features to compute vibration statistics for
counts <- list()
counts2 <- list()
counts3 <- list()
for(f in files){
metaph_sub = metaph %>% filter(filename==f)
metaph_sub_initial_sig_features = metaph_sub %>% filter(BY<.05) %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
counts[str_replace(f,'_90.rds','')]=nrow(metaph_sub)
counts2[str_replace(f,'_90.rds','')]= length(metaph_sub_initial_sig_features)
counts3[str_replace(f,'_90.rds','')] = length(setdiff(unlist(unname(voe_sig)),unlist(unname(metaph_sub_initial_sig_features))))
features_to_investigate = unique(c(metaph_sub_initial_sig_features,voe_sig))
}
counts=data.frame(unlist(counts),unlist(counts2),unlist(counts3))
colnames(counts)=c('Features tested','Significant features (FDR < 0.05)','Additional significant (FDR < 0.05) features post-vibration')
print(counts)
counts
#get features to compute vibration statistics for
counts <- list()
counts2 <- list()
counts3 <- list()
for(f in files){
metaph_sub = metaph %>% filter(filename==f)
metaph_sub_initial_sig_features = metaph_sub %>% filter(BY<.05) %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
counts[str_replace(f,'_90.rds','')]=nrow(metaph_sub)
counts2[str_replace(f,'_90.rds','')]= nrow(metaph_sub_initial_sig_features)
counts3[str_replace(f,'_90.rds','')] = length(setdiff(unlist(unname(voe_sig)),unlist(unname(metaph_sub_initial_sig_features))))
features_to_investigate = unique(c(metaph_sub_initial_sig_features,voe_sig))
}
counts=data.frame(unlist(counts),unlist(counts2),unlist(counts3))
colnames(counts)=c('Features tested','Significant features (FDR < 0.05)','Additional significant (FDR < 0.05) features post-vibration')
print(counts)
counts
#get features to compute vibration statistics for
counts <- list()
counts2 <- list()
counts3 <- list()
for(f in files){
metaph_sub = metaph %>% filter(filename==f)
metaph_sub_initial_sig_features = metaph_sub %>% filter(BY<.05) %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
counts[str_replace(f,'_90.rds','')]=nrow(metaph_sub)
counts2[str_replace(f,'_90.rds','')]= nrow(metaph_sub_initial_sig_features)
counts3[str_replace(f,'_90.rds','')] = length(setdiff(unlist(unname(voe_sig)),unlist(unname(metaph_sub_initial_sig_features))))
features_to_investigate = unique(c(metaph_sub_initial_sig_features,voe_sig))
}
counts=data.frame(unlist(counts),unlist(counts2),unlist(counts3))
colnames(counts)=c('Features tested','Significant features (FDR < 0.05)','Additional significant (FDR < 0.05) features post-vibration')
print(counts)
counts_subset = counts %>% filter(`Additional significant (FDR < 0.05) features post-vibration`!=0 | `Significant features (FDR < 0.05)`!=0 )
ggplot(counts_subset %>% rownames_to_column('phenotype') %>% melt,aes(x=phenotype,y=value,fill=variable)) + geom_bar(stat='identity',position='dodge') + coord_flip() + scale_fill_manual(values=RColorBrewer::brewer.pal(name='Set1',n=5))
ggsave('~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/repr/association_and_vibration_output.pdf')
head(voe)
#get features to compute vibration statistics for
counts <- list()
counts2 <- list()
counts3 <- list()
features <- list()
for(f in files){
metaph_sub = metaph %>% filter(filename==f)
metaph_sub_initial_sig_features = metaph_sub %>% filter(BY<.05) %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
counts[str_replace(f,'_90.rds','')]=nrow(metaph_sub)
counts2[str_replace(f,'_90.rds','')]= nrow(metaph_sub_initial_sig_features)
counts3[str_replace(f,'_90.rds','')] = length(setdiff(unlist(unname(voe_sig)),unlist(unname(metaph_sub_initial_sig_features))))
features_to_investigate = unique(c(metaph_sub_initial_sig_features,voe_sig))
features[[f]]=features_to_investigate
}
counts=data.frame(unlist(counts),unlist(counts2),unlist(counts3))
colnames(counts)=c('Features tested','Significant features (FDR < 0.05)','Additional significant (FDR < 0.05) features post-vibration')
print(counts)
counts_subset = counts %>% filter(`Additional significant (FDR < 0.05) features post-vibration`!=0 | `Significant features (FDR < 0.05)`!=0 )
ggplot(counts_subset %>% rownames_to_column('phenotype') %>% melt,aes(x=phenotype,y=value,fill=variable)) + geom_bar(stat='identity',position='dodge') + coord_flip() + scale_fill_manual(values=RColorBrewer::brewer.pal(name='Set1',n=5))
ggsave('~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/repr/association_and_vibration_output.pdf')
bind_rows(features)
features
features[[1]]
features[[2]]
#get features to compute vibration statistics for
counts <- list()
counts2 <- list()
counts3 <- list()
features <- list()
for(f in files){
metaph_sub = metaph %>% filter(filename==f)
metaph_sub_initial_sig_features = metaph_sub %>% filter(BY<.05) %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
counts[str_replace(f,'_90.rds','')]=nrow(metaph_sub)
counts2[str_replace(f,'_90.rds','')]= nrow(metaph_sub_initial_sig_features)
counts3[str_replace(f,'_90.rds','')] = length(setdiff(unlist(unname(voe_sig)),unlist(unname(metaph_sub_initial_sig_features))))
features_to_investigate = unique(c(metaph_sub_initial_sig_features,voe_sig))
if(length(features_to_investigate!=0)){
features[[f]]=features_to_investigate
}
}
#get features to compute vibration statistics for
counts <- list()
counts2 <- list()
counts3 <- list()
features <- list()
for(f in files){
metaph_sub = metaph %>% filter(filename==f)
metaph_sub_initial_sig_features = metaph_sub %>% filter(BY<.05) %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
counts[str_replace(f,'_90.rds','')]=nrow(metaph_sub)
counts2[str_replace(f,'_90.rds','')]= nrow(metaph_sub_initial_sig_features)
counts3[str_replace(f,'_90.rds','')] = length(setdiff(unlist(unname(voe_sig)),unlist(unname(metaph_sub_initial_sig_features))))
features_to_investigate = unique(c(metaph_sub_initial_sig_features,voe_sig))
if(length(features_to_investigate)!=0)){
#get features to compute vibration statistics for
counts <- list()
counts2 <- list()
counts3 <- list()
features <- list()
for(f in files){
metaph_sub = metaph %>% filter(filename==f)
metaph_sub_initial_sig_features = metaph_sub %>% filter(BY<.05) %>% select(feature)
fdr_sig = metaph %>% filter(BY<=.05) %>% select(p.value)%>% max
voe_sig = voe %>% filter(filename==f) %>% filter(p.value < fdr_sig) %>% select(independent_feature) %>% distinct
counts[str_replace(f,'_90.rds','')]=nrow(metaph_sub)
counts2[str_replace(f,'_90.rds','')]= nrow(metaph_sub_initial_sig_features)
counts3[str_replace(f,'_90.rds','')] = length(setdiff(unlist(unname(voe_sig)),unlist(unname(metaph_sub_initial_sig_features))))
features_to_investigate = unique(c(metaph_sub_initial_sig_features,voe_sig))
if(length(features_to_investigate)!=0){
features[[f]]=features_to_investigate
}
}
counts=data.frame(unlist(counts),unlist(counts2),unlist(counts3))
colnames(counts)=c('Features tested','Significant features (FDR < 0.05)','Additional significant (FDR < 0.05) features post-vibration')
print(counts)
counts_subset = counts %>% filter(`Additional significant (FDR < 0.05) features post-vibration`!=0 | `Significant features (FDR < 0.05)`!=0 )
ggplot(counts_subset %>% rownames_to_column('phenotype') %>% melt,aes(x=phenotype,y=value,fill=variable)) + geom_bar(stat='identity',position='dodge') + coord_flip() + scale_fill_manual(values=RColorBrewer::brewer.pal(name='Set1',n=5))
ggsave('~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/repr/association_and_vibration_output.pdf')
bind_rows(features)
features
unlist(unname(features))
bind_rows(unlist(unname(features)))
unlist(unname(features))
unique(unlist(unname(features)))
unique(unlist(unname(features)))[[1]]
unique(unlist(unname(features)))[[2]]
unique(unlist(unname(features)))[[3]]
length(unique(unlist(unname(features))))
length(features)
features = unique(unlist(unname(features)))
head(voe)
setwd('~/GitHub/quantvoe/data/')
list.files()
independent_variables_dataset1 = readRDS('example_data_dataset_1_independent.rds')
dependent_varables_dataset1 = readRDS('example_data_dataset_1_dependent_systolic_bmi.rds')
independent_variables_dataset1 = readRDS('example_data_dataset_2_independent.rds')
dependent_varables_dataset1 =readRDS('example_data_dataset_2_dependent_systolic_bmi.rds')
head(independent_variables_dataset1)
independent_variables_dataset1 = readRDS('example_data_dataset_1_independent.rds')
dependent_varables_dataset1 = readRDS('example_data_dataset_1_dependent_systolic_bmi.rds')
independent_variables_dataset2 = readRDS('example_data_dataset_2_independent.rds')
dependent_varables_dataset2 =readRDS('example_data_dataset_2_dependent_systolic_bmi.rds')
vignette_data = list('independent_variables_dataset1' = independent_variables_dataset1, 'dependent_varables_dataset1' = dependent_varables_dataset1, 'independent_variables_dataset2' = independent_variables_dataset2. 'dependent_varables_dataset2' = dependent_varables_dataset2)
vignette_data = list(c('independent_variables_dataset1' = independent_variables_dataset1, 'dependent_varables_dataset1' = dependent_varables_dataset1, 'independent_variables_dataset2' = independent_variables_dataset2, 'dependent_varables_dataset2' = dependent_varables_dataset2))
vignette_data
save(vignette_data,'data_for_vignette.rda')
save(vignette_data,file = 'data_for_vignette.rda')
rm(list=ls())
library(quantvoe)
data(vapply, FUN.VALUE = type, ...))
library(quantvoe)
data("nhanes_vignette")
data(vignette_data)
